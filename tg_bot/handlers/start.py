from aiogram import Router, types, F
from aiogram.filters import CommandStart
from tg_bot.keyboards.main_menu import main_menu_keyboard
from tg_bot.config import WEB_SERVER_PORT, ADMIN_ID
from aiogram.utils.markdown import hlink
import qrcode
from io import BytesIO
from tg_bot.keyboards.channels_menu import get_channels_keyboard, get_categories_keyboard
from asgiref.sync import async_to_sync, sync_to_async
router = Router()

def _get_categories():
    from admin_panel.models import Category
    return list(Category.objects.all())

def _get_channels():
    from admin_panel.models import Channel
    return list(Channel.objects.all())

# –û–±–≥–æ—Ä—Ç–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É
get_categories = sync_to_async(_get_categories)
get_channels = sync_to_async(_get_channels)
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ Telegram –∫–∞–Ω–∞–ª—ñ–≤.", reply_markup=main_menu_keyboard)

@router.message(F.text == "üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç")
async def website(message: types.Message):
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—é IP-–∞–¥—Ä–µ—Å—É –∞–±–æ –¥–æ–º–µ–Ω–Ω–µ —ñ–º'—è, —è–∫—â–æ –≤–æ–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ
    website_url = f"http://192.168.0.237:{WEB_SERVER_PORT}"  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ IP, —è–∫–∏–π –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É Flask
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å–∞–π—Ç
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–í—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç", url=website_url)],
        [types.InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ QR-–∫–æ–¥", callback_data="get_qr_code")]
    ])
    
    await message.answer("–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:", reply_markup=keyboard)

@router.callback_query(F.data == "get_qr_code")
async def send_qr_code(callback: types.CallbackQuery):
    website_url = f"http://192.168.0.237:{WEB_SERVER_PORT}"
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ QR-–∫–æ–¥ –¥–ª—è –≤–µ–±-—Å–∞–π—Ç—É
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(website_url)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –±—É—Ñ–µ—Ä
        bio = BytesIO()
        img.save(bio, 'PNG')
        bio.seek(0)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ QR-–∫–æ–¥
        await callback.message.answer_photo(
            photo=types.BufferedInputFile(
                file=bio.getvalue(), 
                filename="qrcode.png"
            ),
            caption=f"QR-–∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–∞–π—Ç—É: {website_url}"
        )
        await callback.answer()
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è QR-–∫–æ–¥—É: {e}")
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ QR-–∫–æ–¥")

@router.message(F.text == "üìé–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤")
async def list_channels(message: types.Message, channels_data: dict):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
    """
    channels = await get_channels()
    # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–¥–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    if message.from_user.id == ADMIN_ID:
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª:", reply_markup=get_channels_keyboard(channels))
        return
    
    # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫
    if not channels:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    
    channels_text = "üìé –°–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤:\n\n"
    for channel in channels:
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if channel.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
        channels_text += f"‚Ä¢ {channel.name} ({status})\n"
    
    await message.answer(channels_text)

@router.message(F.text == "üìç–ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
async def list_categories(message: types.Message, channels_data: dict, categories: dict):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    """
    categories = await get_categories()
    # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–¥–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    if message.from_user.id == ADMIN_ID:
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=get_categories_keyboard(channels_data, categories))
        return
    
    # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫
    if not categories:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    
    categories_text = "üìç –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:\n\n"
    for category in categories:
        categories_text += f"‚Ä¢ ID {category.id}: {category.name}\n"
    
    await message.answer(categories_text)